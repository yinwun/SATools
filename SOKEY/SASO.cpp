#include "pch.h"
#include "SASO.h"

//0012F8BC   0461BB61  ASCII "3EC89E14A9A40F93"
/* stw 06
int arry75A[0x60] =
{
0x0E, 0x7D, 0x55, 0x4E, 0x9E, 0x11, 0x4F, 0x65,
0x15, 0xA8, 0x90, 0x2A, 0x4F, 0x85, 0xBD, 0xC4,
0x5E, 0x26, 0xDF, 0x80, 0xAB, 0x1C, 0x0A, 0xF8,
0xBB, 0x8A, 0xAA, 0x91, 0xD8, 0x51, 0xB8, 0x3A,
0x8E, 0x03, 0xA6, 0x30, 0x30, 0x3E, 0x5C, 0xB9,
0x2D, 0x04, 0x44, 0x7C, 0x74, 0x28, 0x42, 0x96,
0x54, 0xE5, 0x74, 0x92, 0x29, 0xE0, 0xC6, 0xC5,
0x37, 0x20, 0xAB, 0x15, 0xEF, 0x83, 0x27, 0x73,
0x24, 0x92, 0xAB, 0x92, 0xAB, 0x6D, 0x01, 0x0B,
0xB9, 0x12, 0xFA, 0x06, 0x70, 0x4E, 0xB4, 0x5A,
0xD8, 0x64, 0x91, 0xE4, 0x16, 0x7B, 0x54, 0x80,
0x8C, 0xEB, 0x36, 0x6D, 0x55, 0x61, 0x75, 0x48,
};
*/

//STW11 Beigin
const int KeytableD10[] =
{
	0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15,
	0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01,
	0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20, 0x27, 0x07, 0x2F, 0x0F, 0x37, 0x17, 0x3F, 0x1F,
	0x26, 0x06, 0x2E, 0x0E, 0x36, 0x16, 0x3E, 0x1E, 0x25, 0x05, 0x2D, 0x0D, 0x35, 0x15, 0x3D, 0x1D,
	0x24, 0x04, 0x2C, 0x0C, 0x34, 0x14, 0x3C, 0x1C, 0x23, 0x03, 0x2B, 0x0B, 0x33, 0x13, 0x3B, 0x1B,
	0x22, 0x02, 0x2A, 0x0A, 0x32, 0x12, 0x3A, 0x1A, 0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19,
	0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02, 0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14, 0x0C, 0x04,
	0x3E, 0x36, 0x2E, 0x26, 0x1E, 0x16, 0x0E, 0x06, 0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08,
	0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01, 0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13, 0x0B, 0x03,
	0x3D, 0x35, 0x2D, 0x25, 0x1D, 0x15, 0x0D, 0x05, 0x3F, 0x37, 0x2F, 0x27, 0x1F, 0x17, 0x0F, 0x07
};

const int KeytableA74[] =
{
	0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80
};

const int Arry6D4[] =
{
	0x00, 0x00, 0x00, 0x00
};

const int arry75A[] =
{
	0x4E, 0x73, 0x59, 0xB4, 0xCA, 0x02, 0x7F, 0x41, 0xF5, 0x13, 0x09, 0x5C, 0x9F, 0xC1, 0x99, 0xC1,
	0x91, 0x94, 0x1F, 0x03, 0xBF, 0x41, 0x26, 0xAD, 0xBF, 0x18, 0x8D, 0x7A, 0x18, 0x8D, 0x1B, 0x2A,
	0xEC, 0x02, 0x51, 0xBF, 0x98, 0x7C, 0xBC, 0x07, 0x39, 0xA1, 0xD4, 0x2F, 0x6C, 0xE2, 0x09, 0x71,
	0x72, 0xAD, 0xB6, 0xF7, 0xC0, 0x42, 0xFC, 0xA4, 0x27, 0x84, 0x87, 0x4A, 0xE3, 0x86, 0x3E, 0x9C,
	0xB6, 0x44, 0xEC, 0x92, 0xB6, 0x78, 0xC6, 0xE0, 0xB6, 0x9A, 0x7A, 0x18, 0xEC, 0x0B, 0xAE, 0x72,
	0x72, 0xAE, 0x74, 0x10, 0xAE, 0x5F, 0x5C, 0xA9, 0x63, 0x62, 0x27, 0x55, 0xD3, 0x47, 0x4B, 0x31

};


//STW 11 end


//5AF0,0
//5B10, 5x8=33
const int Keytable15AF0B10[] =
{
	0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02,
	0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14, 0x0C, 0x04,
	0x3E, 0x36, 0x2E, 0x26, 0x1E, 0x16, 0x0E, 0x06,
	0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08,
	0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,
	0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13, 0x0B, 0x03,
	0x3D, 0x35, 0x2D, 0x25, 0x1D, 0x15, 0x0D, 0x05,
	0x3F, 0x37, 0x2F, 0x27, 0x1F, 0x17, 0x0F, 0x07
};

//57E4
const int Keytable7E4[] =
{
	0x01, 0x02, 0x04, 0x08,
	0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x0E, 0x11, 0x0B, 0x18, 0x01, 0x05, 0x03, 0x1C,
	0x0F, 0x06, 0x15, 0x0A, 0x17, 0x13, 0x0C, 0x04,
	0x1A, 0x0B, 0x10, 0x07, 0x1B, 0X14, 0x0D, 0x02,
	0x29, 0x34, 0x1F, 0x25, 0x2F, 0x37, 0x1E, 0x28
};

/*sTW 06
//5A80
const int KeytableA80[] =
{
0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05,
0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B,
0x0C, 0x0D, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15,
0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B,
0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01,
0x28, 0x08, 0x30, 0x38, 0x18, 0x40, 0x20, 0x27,
0x07, 0x2F, 0x0F, 0x37, 0x17, 0x3F, 0x1F, 0x26
};
*/

const int KeytableA60[] =
{
	0x10, 0x07, 0x14, 0x15, 0x1D, 0x0C, 0x1C, 0x11,
	0x01, 0x0F, 0x17, 0x1A, 0x05, 0x12, 0x1F, 0x0A,
	0x02, 0x08, 0x18, 0x0E, 0x20, 0x1B, 0x03, 0x09,
	0x13, 0x0D, 0x1E, 0x06, 0x16, 0x0B, 0x04, 0x19,
	0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05,
	0x06, 0x07, 0x08, 0x09, 0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11,
	0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15,
	0x16, 0x17, 0x18, 0x19, 0x18, 0x19, 0x1A, 0x1B,
	0x1C, 0x1D, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x01,
	0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20,
	0x27, 0x07, 0x2F, 0x0F, 0x37, 0x17, 0x3F, 0x1F,
	0x26, 0x06, 0x2E, 0x0E, 0x36, 0x16, 0x3E, 0x1E,
	0x25, 0x05, 0x2D, 0x0D, 0x35, 0x15, 0x3D, 0x1D,
	0x24, 0x04, 0x2C, 0x0C, 0x34, 0x14, 0x3C, 0x1C,
	0x23, 0x03, 0x2B, 0x0B, 0x33, 0x13, 0x3B, 0x1B,
	0x22, 0x02, 0x2A, 0x0A, 0x32, 0x12, 0x3A, 0x1A,
	0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19,
	0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02,
	0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14, 0x0C, 0x04
};

const int Keytable860[] =
{
	0x0E, 0x04, 0x0D, 0x01, 0x01, 0x0F, 0x0B, 0x08,
	0x03, 0x0A, 0x06, 0x0C, 0x05, 0x09, 0x00, 0x07,
	0x00, 0x0F, 0x07, 0x04, 0x0E, 0x02, 0x0D, 0x01,
	0x0A, 0x06, 0x0C, 0x0B, 0x09, 0x05, 0x03, 0x08,
	0x04, 0x01, 0x0E, 0x08, 0x0D, 0x06, 0x02, 0x0B,
	0x0F, 0x0C, 0x09, 0x07,
	0x03, 0x0A, 0x05, 0x00, 0x0F, 0x0C, 0x08, 0x02,
	0x04, 0x09, 0x01, 0x07, 0x05, 0x0B, 0x03, 0x0E,
	0x0A, 0x00, 0x06, 0x0D, 0x0F, 0x01, 0x08, 0x0E,
	0x06, 0x0B, 0x03, 0x04, 0x09, 0x07, 0x02, 0x0D,
	0x0C, 0x00, 0x05, 0x0A, 0x03, 0x0D, 0x04, 0x07,
	0x0F, 0x02, 0x08, 0x0E, 0x0C, 0x00, 0x01, 0x0A,
	0x06, 0x09, 0x0B, 0x05, 0x00, 0x0E, 0x07, 0x0B,
	0x0A, 0x04, 0x0D, 0x01, 0x05, 0x08, 0x0C, 0x06,
	0x09, 0x03, 0x02, 0x0F, 0x0D, 0x08, 0x0A, 0x01,
	0x03, 0x0F, 0x04, 0x02, 0x0B, 0x06, 0x07, 0x0C,
	0x00, 0x05, 0x0E, 0x09, 0x0A, 0x00, 0x09, 0x0E,
	0x06, 0x03, 0x0F, 0x05, 0x01, 0x0D, 0x0C, 0x07,
	0x0B, 0x04, 0x02, 0x08, 0x0D, 0x07, 0x00, 0x09,
	0x03, 0x04, 0x06, 0x0A, 0x02, 0x08, 0x05, 0x0E,
	0x0C, 0x0B, 0x0F, 0x01, 0x0D, 0x06, 0x04, 0x09,
	0x08, 0x0F, 0x03, 0x00, 0x0B, 0x01, 0x02, 0x0C,
	0x05, 0x0A, 0x0E, 0x07, 0x01, 0x0A, 0x0D, 0x00,
	0x06, 0x09, 0x08, 0x07, 0x04, 0x0F, 0x0E, 0x03,
	0x0B, 0x05, 0x02, 0x0C, 0x07, 0x0D, 0x0E, 0x03,
	0x00, 0x06, 0x09, 0x0A, 0x01, 0x02, 0x08, 0x05,
	0x0B, 0x0C, 0x04, 0x0F, 0x0D, 0x08, 0x0B, 0x05,
	0x06, 0x0F, 0x00, 0x03, 0x04, 0x07, 0x02, 0x0C,
	0x01, 0x0A, 0x0E, 0x09, 0x0A, 0x06, 0x09, 0x00,
	0x0C, 0x0B, 0x07, 0x0D, 0x0F, 0x01, 0x03, 0x0E,
	0x05, 0x02, 0x08, 0x04, 0x03, 0x0F, 0x00, 0x06,
	0x0A, 0x01, 0x0D, 0x08, 0x09, 0x04, 0x05, 0x0B,
	0x0C, 0x07, 0x02, 0x0E, 0x02, 0x0C, 0x04, 0x01,
	0x07, 0x0A, 0x0B, 0x06, 0x08, 0x05, 0x03, 0x0F,
	0x0D, 0x00, 0x0E, 0x09, 0x0E, 0x0B, 0x02, 0x0C,
	0x04, 0x07, 0x0D, 0x01, 0x05, 0x00, 0x0F, 0x0A,
	0x03, 0x09, 0x08, 0x06, 0x04, 0x02, 0x01, 0x0B,
	0x0A, 0x0D, 0x07, 0x08, 0x0F, 0x09, 0x0C, 0x05,
	0x06, 0x03, 0x00, 0x0E, 0x0B, 0x08, 0x0C, 0x07,
	0x01, 0x0E, 0x02, 0x0D, 0x06, 0x0F, 0x00, 0x09,
	0x0A, 0x04, 0x05, 0x03, 0x0C, 0x01, 0x0A, 0x0F,
	0x09, 0x02, 0x06, 0x08, 0x00, 0x0D, 0x03, 0x04,
	0x0E, 0x07, 0x05, 0x0B, 0x0A, 0x0F, 0x04, 0x02,
	0x07, 0x0C, 0x09, 0x05, 0x06, 0x01, 0x0D, 0x0E,
	0x00, 0x0B, 0x03, 0x08, 0x09, 0x0E, 0x0F, 0x05,
	0x02, 0x08, 0x0C, 0x03, 0x07, 0x00, 0x04, 0x0A,
	0x01, 0x0D, 0x0B, 0x06, 0x04, 0x03, 0x02, 0x0C,
	0x09, 0x05, 0x0F, 0x0A, 0x0B, 0x0E, 0x01, 0x07,
	0x06, 0x00, 0x08, 0x0D, 0x0E, 0x04, 0x0D, 0x01,
	0x01, 0x0F, 0x0B, 0x08, 0x03, 0x0A, 0x06, 0x0C,
	0x05, 0x09, 0x00, 0x07, 0x00, 0x0F, 0x07, 0x04,
	0x0E, 0x02, 0x0D, 0x01, 0x0A, 0x06, 0x0C, 0x0B,
	0x09, 0x05, 0x03, 0x08, 0x04, 0x01, 0x0E, 0x08,
	0x0D, 0x06, 0x02, 0x0B, 0x0F, 0x0C, 0x09, 0x07,
	0x03, 0x0A, 0x05, 0x00, 0x0F, 0x0C, 0x08, 0x02,
	0x04, 0x09, 0x01, 0x07, 0x05, 0x0B, 0x03, 0x0E,
	0x0A, 0x00, 0x06, 0x0D, 0x04, 0x0B, 0x02, 0x0E,
	0x0F, 0x00, 0x08, 0x0D, 0x03, 0x0C, 0x09, 0x07,
	0x05, 0x0A, 0x06, 0x01, 0x0D, 0x00, 0x0B, 0x07,
	0x04, 0x09, 0x01, 0x0A, 0x0E, 0x03, 0x05, 0x0C,
	0x02, 0x0F, 0x08, 0x06, 0x01, 0x04, 0x0B, 0x0D,
	0x0C, 0x03, 0x07, 0x0E, 0x0A, 0x0F, 0x06, 0x08,
	0x00, 0x05, 0x09, 0x02, 0x06, 0x0B, 0x0D, 0x08,
	0x01, 0x04, 0x0A, 0x07, 0x09, 0x05, 0x00, 0x0F,
	0x0E, 0x02, 0x03, 0x0C, 0x10, 0x07, 0x14, 0x15,
	0x1D, 0x0C, 0x1C, 0x11, 0x01, 0x0F, 0x17, 0x1A,
	0x05, 0x12, 0x1F, 0x0A, 0x02, 0x08, 0x18, 0x0E,
	0x20, 0x1B, 0x03, 0x09, 0x13, 0x0D, 0x1E, 0x06,
	0x16, 0x0B, 0x04, 0x19, 0x20, 0x01, 0x02, 0x03,
	0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
	0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0C, 0x0D,
	0x0E, 0x0F, 0x10, 0x11, 0x10, 0x11, 0x12, 0x13,
	0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
	0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1C, 0x1D,
	0x1E, 0x1F, 0x20, 0x01, 0x28, 0x08, 0x30, 0x10,
	0x38, 0x18, 0x40, 0x20, 0x27, 0x07, 0x2F, 0x0F,
	0x37, 0x17, 0x3F, 0x1F, 0x26, 0x06, 0x2E, 0x0E,
	0x36, 0x16, 0x3E, 0x1E, 0x25, 0x05, 0x2D, 0x0D,
	0x35, 0x15, 0x3D, 0x1D, 0x24, 0x04, 0x2C, 0x0C,
	0x34, 0x14, 0x3C, 0x1C, 0x23, 0x03, 0x2B, 0x0B,
	0x33, 0x13, 0x3B, 0x1B, 0x22, 0x02, 0x2A, 0x0A,
	0x32, 0x12, 0x3A, 0x1A, 0x21, 0x01, 0x29, 0x09,
	0x31, 0x11, 0x39, 0x19, 0x3A, 0x32, 0x2A, 0x22,
	0x1A, 0x12, 0x0A, 0x02, 0x3C, 0x34, 0x2C, 0x24,
	0x1C, 0x14, 0x0C, 0x04
};

const int Keytable5AB0[0x7c] =
{
	0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20,
	0x27, 0x07, 0x2F, 0x0F, 0x37, 0x17, 0x3F, 0x1F,
	0x26, 0x06, 0x2E, 0x0E, 0x36, 0x16, 0x3E, 0x1E,
	0x25, 0x05, 0x2D, 0x0D, 0x35, 0x15, 0x3D, 0x1D,
	0x24, 0x04, 0x2C, 0x0C, 0x34, 0x14, 0x3C, 0x1C,
	0x23, 0x03, 0x2B, 0x0B, 0x33, 0x13, 0x3B, 0x1B,
	0x22, 0x02, 0x2A, 0x0A, 0x32, 0x12, 0x3A, 0x1A,
	0x21, 0x01, 0x29, 0x09, 0x31, 0x11, 0x39, 0x19,
	0x3A, 0x32, 0x2A, 0x22, 0x1A, 0x12, 0x0A, 0x02,
	0x3C, 0x34, 0x2C, 0x24, 0x1C, 0x14, 0x0C, 0x04,
	0x3E, 0x36, 0x2E, 0x26, 0x1E, 0x16, 0x0E, 0x06,
	0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08,
	0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,
	0x3B, 0x33, 0x2B, 0x23, 0x1B, 0x13, 0x0B, 0x03,
	0x3D, 0x35, 0x2D, 0x25, 0x1D, 0x15, 0x0D, 0x05,
	0x3F, 0x37, 0x2F, 0x27
};

SASO::SASO(CString serverKey)
{
	keycstr = serverKey;
}

SASO::~SASO()
{

}

char* SASO::RunningKey()
{
	//生成token
	GenerateToken();

	//生成70-73数据, 第一组数据
	GenerateKey70To73();

	for (int i = 0; i < 0x10; i++)
	{
		//生成674-677, 5E8-5ED
		Generate674And5E8();

		//生成5E4
		Generate5E4();

		//生成678-6b3
		GenerateBody();

		Seed = Seed + 4;

		Clear5E4To5E8();

	}

	GenerateRunningKey();

	printf("\n");
	char *sz = (char*)malloc(150 * sizeof(char));
	char *tmp = (char*)malloc(150 * sizeof(char));
	memset(sz, 0, 8);
	memset(tmp, 0, 1);
	for (int i = 0; i < 8; i++)
	{
		sprintf(tmp, "%c", Arry774[i]);
		strcat(sz, tmp);
	}
	printf("\n");
	printf("%s", sz);

	return sz;
}

/*
生成服务器返回的token
*/
void SASO::GenerateToken()
{
	int keyLegth = keycstr.GetLength();
	int j = 0;
	int k = 0;
	CString hexStr;

	for (int i = 0; i <= keyLegth - 1; i++)
	{
		k = i;
		hexStr = hexStr + keycstr[i];
		if ((k + 1) % 2 == 0)
		{
			wchar_t *end = NULL;
			long value = wcstol(hexStr.AllocSysString(), &end, 16);
			hexStr = "";
			key[j] = value;
			j = j + 1;
		}
	}
}

/*
生成成第一组数据
*/
void SASO::GenerateKey70To73()
{
	unsigned int eax = 0x0;
	int esi = 0x0;
	unsigned int edx = 0x0;
	int ecx = 0x0;
	unsigned int cl = 0x0;
	unsigned int bl = 0x0;

	for (eax; eax < 0x20; eax++)
	{
		esi = Keytable15AF0B10[eax];
		esi = esi - 1;
		edx = esi;
		esi = esi >> 0x03;
		edx = ~edx;
		edx = edx & 0x7;
		cl = Keytable7E4[edx];

		int tpkey = key[esi];
		int tpr = cl & tpkey;
		ecx = eax;
		esi = eax;
		ecx = ~ecx;

		//Z 零标志位 Z=1表示运算结果为零；Z=0表示运算结果为非零
		if (tpr == 0)
		{
			ecx = ecx & 0x7;
			esi = esi >> 0x3;
			bl = Keytable7E4[ecx];
			cl = bl;
			cl = ~cl;
			Arry664[esi] = Arry664[esi] & cl; //赋值
		}
		else
		{
			esi = esi >> 0x03;
			ecx = ecx & 0x07;
			bl = Keytable7E4[ecx];
			Arry664[esi] = Arry664[esi] | bl; //赋值
		}

		edx = Keytable15AF0B10[32 + eax];
		edx = edx - 1;
		ecx = edx;
		edx = edx >> 0x3;
		ecx = ~ecx;
		ecx = ecx & 0x7;
		cl = Keytable7E4[ecx];
		tpkey = key[edx];
		tpr = cl & tpkey;

		if (tpr == 0)//Z 零标志位 Z=1表示运算结果为零；Z=0表示运算结果为非零
		{
			bl = ~bl;
			Arry6B4[esi] = Arry6B4[esi] & bl;
		}
		else
		{
			Arry6B4[esi] = Arry6B4[esi] | bl;
		}
	}

}

/*
生成674-677
生成5E8-5ED
*/
void SASO::Generate674And5E8()
{
	unsigned int eax = 0x0;
	int esi = 0x0;
	unsigned int edx = 0x0;
	int ecx = 0x0;
	unsigned int cl = 0x0;
	unsigned int bl = 0x0;
	int b = 0xFF;

	//赋值上次生成的值到新数组
	for (int i = 0; i < 4; i++)
	{
		Arry674[i + Seed] = Arry6B4[i + Seed];
	}

	//5E5到5EA
	int tp6B4 = 0x00;

	for (; edx <= 0x30; edx++)
	{
		ecx = KeytableD10[edx];
		ecx = ecx - 1;
		eax = ecx;
		ecx = ecx >> 0x03;
		eax = ~eax;
		eax = eax & 0x07;
		tp6B4 = Arry6B4[ecx + Seed];//取上次的值
		eax = Keytable7E4[eax];
		eax = eax & b;
		int tpr = eax & tp6B4;
		eax = edx;
		//0F97301D  |.  8D4D F4       |lea ecx,[local.3] ; ecx newArry5E4 index 01
		ecx = 0x00;
		eax = eax >> 0x03;
		ecx = ecx + eax;
		eax = edx;
		eax = ~eax;
		eax = eax & 0x7;
		eax = Keytable7E4[eax];
		eax = eax & b;
		if (tpr == 0)
		{
			eax = ~eax;
			Arry5E8[ecx] = Arry5E8[ecx] & eax;
		}
		else
		{
			Arry5E8[ecx] = Arry5E8[ecx] | eax;
		}
	}

	//变换赋值5E5到5EA
	int a75Index = 0x60 - v5dc5E8;
	for (int i = 0; i < 6; i++)
	{
		eax = arry75A[a75Index + i];
		eax = eax & b;
		int tp = Arry5E8[i] ^ eax;
		Arry5E8[i] = tp;
	}

	v5dc5E8 = v5dc5E8 + 0x6;
}

void SASO::Generate5E4()
{
	unsigned int eax = 0x0;
	int esi = 0x0;
	unsigned int edx = 0x0;
	int ecx = 0x0;
	unsigned int cl = 0x0;
	unsigned int bl = 0x0;

	//清空值

	unsigned int al = 0x0;
	bl = 0x0;
	cl = 0x0;
	esi = 0x0;
	eax = 0x0;
	edx = 0x0;
	ecx = 0x0;
	int dl = 0x0;
	int tpE5x = 0x0;
	int tpr = 0x0;
	int v5D8 = 0x0;
	int v5E3 = 0x0;
	int edi = 0x0;
	int bh = 0x0;
	int b = 0xFF;

	for (int i = 8; i > 0; i--)
	{
		esi = eax;
		eax = esi;
		eax = ~eax;
		ecx = esi;
		eax = eax & 0x7;
		ecx = ecx >> 0x3;//xxx
						 //al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		tpr = tpE5x & eax; //al ????

		eax = 0x2;
		ecx = esi + 0x5;
		if (tpr != 0) edx = eax;
		eax = esi - 0x3;
		eax = ~eax;
		ecx = ecx >> 0x3;
		eax = eax & 0x7;
		v5D8 = edx;
		//al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		//tpr = al & tpE5x;
		tpr = eax & tpE5x;

		if (tpr != 0)
		{
			//dl = dl + 1;
			edx = edx + 1;
			v5D8 = edx;
		}

		ecx = esi + 0x1;//0CE
		edx = bl;
		eax = ecx;
		ecx = ecx >> 0x3;
		eax = ~eax;
		eax = eax & 0x7;
		//al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		//tpr = tpE5x & al;
		tpr = tpE5x & eax;
		eax = 0x8;
		ecx = esi + 0x2;

		if (tpr != 0) edx = eax;
		eax = ecx;
		eax = ~eax;
		ecx = ecx >> 0x3;
		eax = eax & 0x7;
		//al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		//tpr = tpE5x & al;
		tpr = tpE5x & eax;
		ecx = esi + 0x3;
		if (tpr != 0) edx = edx + 0x4;//dl = 0x4;
		ecx = esi + 0x3;
		eax = ecx;
		ecx = ecx >> 0x3;
		eax = ~eax;
		eax = eax & 0x7;

		//al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		//tpr = tpE5x & al;
		tpr = tpE5x & eax;

		if (tpr != 0) edx = edx + 0x2;//dl = dl + 0x2;
		eax = esi - 0x4;//12A
		eax = ~eax;
		ecx = esi + 0x4;
		eax = eax & 0x7;
		ecx = ecx >> 0x3;
		//al = Keytable7E4[eax];
		eax = Keytable7E4[eax];
		tpE5x = Arry5E8[ecx];
		//tpr = tpE5x & al; //142
		tpr = tpE5x & eax; //142
		if (tpr != 0) edx = edx + 0x1;// dl = dl + 1;

		eax = v5D8;
		//ecx = al;
		ecx = eax;
		ecx = ecx + edi;
		//eax = dl;
		eax = edx;
		ecx = ecx + ecx;
		bl = Keytable860[eax + ecx * 8];
		bl = bl & b;
		if (bl >= 0x8)
		{
			edx = bh;
			ecx = 0x0;
			eax = edx;
			edx = ~edx;
			eax = eax >> 0x3;
			edx = edx & 0x7;
			ecx = ecx + eax;
			//al = Keytable7E4[edx];
			eax = Keytable7E4[edx];
			//arry5E4[ecx] = arry5E4[ecx] | al;
			arry5E4[ecx] = arry5E4[ecx] | eax;
			bl = bl + 0xF8;
			bl = bl & b;

		}

		if (bl >= 0x4)// 错误取2位
		{
			edx = bh;
			ecx = 0x0;
			edx = edx + 1;
			eax = edx;
			edx = ~edx;
			eax = eax >> 0x3;
			edx = edx & 0x7;
			ecx = ecx + eax;
			//al = Keytable7E4[edx];
			eax = Keytable7E4[edx];
			//arry5E4[ecx] = arry5E4[ecx] | al;
			arry5E4[ecx] = arry5E4[ecx] | eax;
			bl = bl + 0xFC;
			bl = bl & b;

		}

		if (bl >= 0x2)
		{
			edx = bh;
			ecx = 0x0;
			edx = edx + 2;
			eax = edx;
			edx = ~edx;
			eax = eax >> 0x3;
			edx = edx & 0x7;
			ecx = ecx + eax;
			//al = Keytable7E4[edx];
			eax = Keytable7E4[edx];
			//arry5E4[ecx] = arry5E4[ecx] | al;
			arry5E4[ecx] = arry5E4[ecx] | eax;
			bl = bl + 0xFE;
			bl = bl & b;
		}

		if (bl >= 0x1)
		{
			edx = bh;
			ecx = 0x0;
			edx = edx + 3;
			eax = edx;
			edx = ~edx;
			eax = eax >> 0x3;
			edx = edx & 0x7;
			ecx = ecx + eax;
			//al = Keytable7E4[edx];
			eax = Keytable7E4[edx];
			//arry5E4[ecx] = arry5E4[ecx] | al;
			arry5E4[ecx] = arry5E4[ecx] | eax;

		}
		eax = v5E3;
		//dl = dl ^ dl;
		edx = edx ^ edx;
		//al = al + 0x6;
		eax = eax + 0x6;
		bl = bl ^ bl;
		bl = bl & b;
		bh = bh + 0x4;
		//arry5E4[ecx] = al;
		v5E3 = eax;
		edi = edi + 0x4;
	}
}

void SASO::GenerateBody()
{
	unsigned int eax = 0x0;
	int esi = 0x0;
	unsigned int edx = 0x0;
	unsigned int ecx = 0x0;
	unsigned int cl = 0x0;
	unsigned int al = 0x0;
	int edi = 0x0;
	int tpr = 0x0;
	int v5E4 = 0x0;
	int b = 0xFF;

	eax = 0x1;
	edx = 0x0;
	esi = eax * 4 + 0x50;
	edi = edx + 0x20;

	for (; edx < 0x20; edx++)
	{
		ecx = KeytableA60[edx];
		ecx = ecx - 1;
		eax = ecx;
		ecx = ecx >> 0x03;
		eax = ~eax;
		eax = eax & 0x7;
		eax = Keytable7E4[eax];
		v5E4 = arry5E4[ecx];
		tpr = v5E4 & eax;

		eax = edx;
		ecx = edx;
		eax = ~eax;
		if (tpr != 0)
		{
			ecx = ecx >> 0x3;
			eax = eax & 0x7;
			eax = Keytable7E4[eax];
			Arry6B4[ecx + Seed + 4] = Arry6B4[ecx + Seed + 4] | eax;
		}
		else
		{
			eax = eax & 0x7;
			ecx = ecx >> 0x3;
			eax = Keytable7E4[eax];
			eax = eax & b;
			eax = ~eax;
			Arry6B4[ecx + Seed + 4] = Arry6B4[ecx + Seed + 4] & eax;
		}
	}

	//替换8位
	for (int i = 0; i < 4; i++)
	{
		if (v5dc6b4 == 0x0)
		{
			eax = Arry664[i];
			eax = eax & b;
		}
		else
		{
			eax = Arry674[i + v5dc6b4 - 4];
			eax = eax & b;
		}

		int tp = Arry6B4[i + Seed + 4] ^ eax;
		Arry6B4[i + Seed + 4] = tp;

	}

	v5dc6b4 = v5dc6b4 + 0x4;

}

void SASO::Clear5E4To5E8()
{
	for (int i = 0; i < 6; i++)
	{
		Arry5E8[i] = 0x0;
	}

	for (int i = 0; i < 4; i++)
	{
		arry5E4[i] = 0x0;
	}
}

void SASO::GenerateRunningKey()
{
	unsigned int eax = 0x0;
	unsigned int edx = 0x0;
	unsigned int ecx = 0x0;
	int tpr = 0x0;
	int b = 0xFF;
	int tp6b = 0x0;
	int tp67 = 0x0;

	for (; eax < 0x40; eax++)
	{
		int vbc6 = 0x0;
		ecx = Keytable5AB0[eax];
		ecx = ecx & b;
		edx = ecx;

		//532132BC   . /77 1A         ja short sasa.532132D8 ; 大于跳转
		if (ecx <= 0x20)
		{
			edx = edx - 1;
			ecx = edx;
			edx = edx >> 0x3;
			ecx = ~ecx;
			ecx = ecx & 0x7;
			ecx = Keytable7E4[ecx];
			ecx = ecx & b;
			//532132CF   .  848C32 900000>test byte ptr ds:[edx+esi+0x90],cl       ;  6f4-6f7
			tp6b = Arry6B4[64 + edx];
			tpr = tp6b & ecx;
			if (tpr == 0) vbc6 = 1;
		}
		else
		{
			ecx = edx - 1;
			edx = edx + -0x21;
			ecx = ~ecx;
			edx = edx >> 0x3;
			ecx = ecx & 0x7;
			ecx = Keytable7E4[ecx];
			//532132EC   .  844C32 4C     test byte ptr ds:[edx+esi+0x4C],cl       ;  6B0
			tp67 = Arry674[60 + edx];
			tpr = tp67 & ecx;
			if (tpr == 0) vbc6 = 1;
		}

		ecx = eax;
		edx = eax;
		ecx = ~ecx;

		if (vbc6 == 0)
		{
			ecx = ecx & 0x7;
			edx = edx >> 0x3;
			ecx = Keytable7E4[ecx];
			ecx = ecx & b;
			//53213304   .  088C32 020100>or byte ptr ds:[edx+esi+0x102],cl        ;  E766存放key,逻辑或10=1，00，11=0
			Arry774[edx] = Arry774[edx] | ecx;
		}
		else
		{
			ecx = ecx & 0x7;
			edx = edx >> 0x3;
			ecx = Keytable7E4[ecx];
			ecx = ecx & b;
			ecx = ~ecx;
			// 5321331B   .  208C32 020100>and byte ptr ds : [edx + esi + 0x102], cl;  写入值
			Arry774[edx] = Arry774[edx] & ecx;
		}

	}


}
